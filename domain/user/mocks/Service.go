// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	request "ecommerce/dto/request"

	mock "github.com/stretchr/testify/mock"

	user "ecommerce/domain/user"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUserIfNotAny provides a mock function with given fields: req
func (_m *Service) CreateUserIfNotAny(req request.CreateUserRequest) (*user.User, error) {
	ret := _m.Called(req)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CreateUserRequest) (*user.User, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.CreateUserRequest) *user.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CreateUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Service) Login(email string, password string) (*user.User, string, error) {
	ret := _m.Called(email, password)

	var r0 *user.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*user.User, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *user.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
